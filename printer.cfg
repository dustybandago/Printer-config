# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

[bltouch]
sensor_pin: ^PC14
control_pin: PA1
x_offset: 22.5
y_offset: 0
z_offset: 1.2
#speed:

[safe_z_home]
home_xy_position: 115,115 # Change coordinates to the center of your print bed
speed: 50
z_hop: 10                 # Move up 10mm
z_hop_speed: 5

[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 0,0
mesh_max: 190,220
probe_count: 5,5
mesh_pps: 2,2


[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
stealthchop_threshold: 999999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
stealthchop_threshold: 999999

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
#position_endstop: 0.0
position_max: 250
position_min: -2
[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
stealthchop_threshold: 999999

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
nozzle_diameter: 0.800
filament_diameter: 1.750
heater_pin: PC8
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PA0
control: pid
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 290
rotation_distance: 22.67895 #for 5mm Shaft Driven Bondtech gearsets
#gear_ratio: 50:10 #for standard 10t motor
gear_ratio: 50:8 #for sherpa mini 8t motor
microsteps: 16
full_steps_per_rotation: 200 #1.8deg Motor

max_extrude_only_distance: 2500
max_extrude_only_velocity: 75.0
max_extrude_only_accel: 1500

#settings for NEMA14 Stepper
[tmc2209 extruder]
interpolate: True
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650
stealthchop_threshold: 999999

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[heater_fan nozzle_cooling_fan]
pin: PC7

[heater_fan controller_fan]
pin: PB15

[fan]
pin: PC6

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_550044000C50345033313820-if00

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

# See the sample-lcd.cfg file for definitions of common LCD displays

[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
gcode:
    # Extruder and bed temperatures
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Heatsoak time of the bed in minutes and chamber temperature wanted
    #{% set SOAK = params.SOAK|default(8)|int %}
    # {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}
    #{% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(15)|int %}
    # Default material type to 'XXX'
    #{% set MATERIAL = params.MATERIAL|default("XXX")|string %}
    # Get bounding box of the first layer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

    
 # Set vars
    _USER_VARIABLES
    {% set V = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Px = printer["gcode_macro _USER_VARIABLES"].purge_bucket_x %}
    {% set Py = printer["gcode_macro _USER_VARIABLES"].purge_bucket_y %}
    {% set Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_z %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    CLEAR_PAUSE
    BED_MESH_CLEAR
    G90
    M83
    LIGHT_ON


    # 1 ----- HOMING ------------------------------------------
    # Home if not already homed and park the head near the center front
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}


   
    # 5 ----- EXTRUDER HEATING ---------------------------------
    # Heat the nozzle to print temperature ontop of the purge bucket
    # and wait 30s to let the nozzle dilate and stabilize
    G1 X{Px} Y{Py} Z{Pz|int + 20} F{St}
    M109 S{EXTRUDER_TEMP}
    G4 P{60000 * 0.5}
    {% if V %}
        RESPOND MSG="Extruder temperature OK"
    {% endif %}


   
    # 8 ----- BED MESH -------------------------------------------
    {% if V %}
        RESPOND MSG="Bed mesh measurement..."
    {% endif %}
    ADAPTIVE_BED_MESH
    

    # 9 ----- PRINT !!! -------------------------------------------
    # Do a prime line, lower the lighs and start the print
    {% if V %}
        RESPOND MSG="Start printing !"
    {% endif %}
    PRIME_LINE
    LIGHT_ON S=50
    G92 E0.0


[gcode_macro PRIME_LINE]
gcode:  

  G91
    M83
    G1 Z5 F{Sz}

    ; Starting position
    G90
    G1 X2.5 Y20 F{St}
    G1 Z0.3 F{Sz|int / 2}

    ; Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    ; Prime line
    G92 E0
    G1 Y100 E10 F2500
    G92 E0
    G1 Y150 E5 F1500

    ; Retract and Z-hop
    G92 E0
    G1 Z2.0 E-0.1 F{Sz}
    G92 E0
    G1 Z5 F{Sz}

[gcode_macro _USER_VARIABLES]
# Enable verbose output to let the macro have a chat
variable_verbose: True

# Speed control of the machine for all the macros
variable_travel_speed: 250
variable_z_drop_speed: 32
variable_brush_clean_speed: 130

# Physical Z endstop position
#variable_z_endstop_y: 305.5

# Klicky Probe variables
#variable_docklocation_y: 306
#variable_klicky_dock_speed: 55
#variable_klicky_release_speed: 100
#variable_home_z_height: 15

# Brush position for nozzle cleaning
variable_brush_x: 0
variable_brush_y: 0
variable_brush_z: 0

# Purge bucket position
variable_purge_bucket_x: 0
variable_purge_bucket_y: 0
variable_purge_bucket_z: 0

gcode:
    # Copy the physical Z endstop location to probe variables for Klicky internal functionning
    #SET_GCODE_VARIABLE MACRO=0 VARIABLE=z_endstop_x VALUE={ z_endstop_x }
    #SET_GCODE_VARIABLE MACRO=0 VARIABLE=z_endstop_y VALUE={ z_endstop_y }

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready: False
variable_do_mesh: False
variable_do_nominal: False
variable_mesh_min: 0,0
variable_mesh_max: 230,230
variable_mesh_center: 0,0
variable_probe_count: 9,9
variable_rri: 0
variable_algo: "bicubic"
gcode:


[gcode_macro COMPUTE_MESH_PARAMETERS]
description: Compute the mesh parameters and store them for later use
gcode:
    # 1 ----- GET ORIGINAL BEDMESH PARAMS FROM CONFIG ----------------------
    {% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
    {% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
    {% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
    {% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
    {% set xMeshPPS, yMeshPPS = printer["configfile"].config["bed_mesh"]["mesh_pps"].split(',')|map('trim')|map('int') %}

    # If the SIZE parameter is defined and not a dummy placeholder, we do the adaptive
    # bed mesh logic. If it's ommited, we do the original BED_MESH_CALIBRATE function (full bed probing)
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}

        # 2 ----- GET MESH SIZE AND MARGIN FROM MACRO CALL --------------------
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set margin = params.MARGIN|default(5)|int %}

        # 3 ----- APPLY MARGINS ----------------------------------------------
        # We use min/max function as we want it to be constrained by the original
        # bedmesh size. This will avoid going outside the machine limits
        {% set xMin = [xMinConf, (xMin - margin)]|max %}
        {% set xMax = [xMaxConf, (xMax + margin)]|min %}
        {% set yMin = [yMinConf, (yMin - margin)]|max %}
        {% set yMax = [yMaxConf, (yMax + margin)]|min %}

        # 4 ----- COMPUTE A NEW PROBE COUNT ----------------------------------
        # The goal is to have at least the same precision as from the config. So we compute an equivalent number
        # of probe points on each X/Y dimensions (distance between two points should be the same as in the config)
        {% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
        {% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}

        # Then, three possibilities :
        # a) Both dimensions have less than 3 probe points : the bed_mesh is not needed as it's a small print.
        # b) If one of the dimension is less than 3 and the other is greater. The print looks to be elongated and
        #    need the adaptive bed_mesh : we add probe points to the small direction to reach 3 and be able to do it.
        # c) If both direction are greater than 3, we need the adaptive bed_mesh and it's ok.
        # At the end we control (according to Klipper bed_mesh method: "_verify_algorithm") that the computed probe_count is
        # valid according to the choosen algorithm or change it if needed.
        {% if xProbeCnt < 3 and yProbeCnt < 3 %}
            RESPOND MSG="Computed mesh parameters: none, bed mesh not needed"
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}

            {% set xCenter = xMin + ((xMax - xMin) / 2) %}
            {% set yCenter = yMin + ((yMax - yMin) / 2) %}
            {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %} # we still compute the mesh center for those using klipper_z_calibration
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
        {% else %}
            {% set xProbeCnt = [3, xProbeCnt]|max %}
            {% set yProbeCnt = [3, yProbeCnt]|max %}

            # We verify that the number of probe points on each axis is odd or add one to it
            # This is very important to have a relative_reference_index point at the center of the mesh !
            {% if xProbeCnt % 2 == 0 %}
                {% set xProbeCnt = xProbeCnt + 1 %}
            {% endif %}
            {% if yProbeCnt % 2 == 0 %}
                {% set yProbeCnt = yProbeCnt + 1 %}
            {% endif %}

            # Check of the probe points and interpolation algorithms according to Klipper code
            {% if xMeshPPS != 0 or yMeshPPS != 0 %}
                {% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
                {% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
                {% if algo == "lagrange" and probeCntMax > 6 %}
                    # Lagrange interpolation tends to oscillate when using more than 6 samples: swith to bicubic
                    {% set algo = "bicubic" %}
                {% endif %}
                {% if algo == "bicubic" and probeCntMin < 4 %}
                    {% if probeCntMax > 6 %}
                        # Impossible case: need to add probe point on the small axis to be >= 4 (we want 5 to keep it odd)
                        {% if xProbeCnt > yProbeCnt %}
                            {% set yProbeCnt = 5 %}
                        {% else %}
                            {% set xProbeCnt = 5 %}
                        {% endif %}
                    {% else %}
                        # In this case bicubic is not adapted (less than 4 points): switch to lagrange
                        {% set algo = "lagrange" %}
                    {% endif %}
                {% endif %}
            {% endif %}

            # 5 ----- COMPUTE THE RELATIVE_REFERENCE_INDEX POINT --------------------
            {% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
            {% set xCenter = xMin + ((xMax - xMin) / 2) %}
            {% set yCenter = yMin + ((yMax - yMin) / 2) %}

            # 6 ----- FORMAT THE PARAMETERS AND SAVE THEM ---------------------------
            {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
            {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
            {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
            {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
            RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
        {% endif %}
    {% else %}
        RESPOND MSG="Computed mesh parameters: none, going for a nominal bed mesh"
        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}

        {% set xCenter = xMin + ((xMax - xMin) / 2) %}
        {% set yCenter = yMin + ((yMax - yMin) / 2) %}
        {% set mesh_center = "%d,%d"|format(xCenter, yCenter) %} # we still compute the mesh center for those using klipper_z_calibration
        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
    {% endif %}

    # Finaly save in the variables that we already computed the values
    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}


[gcode_macro ADAPTIVE_BED_MESH]
description: Perform a bed mesh, but only where and when it's needed
gcode:
    {% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}
    # If the parameters where computed, we can do the mesh by calling the _DO_ADAPTIVE_MESH
    {% if ready %}
        _DO_ADAPTIVE_MESH
    # If the parameters where not computed prior to the ADAPTIVE_BED_MESH call, we call the COMPUTE_MESH_PARAMETERS
    # macro first and then call the _DO_ADAPTIVE_MESH macro after it
    {% else %}
        RESPOND MSG="Adaptive bed mesh: parameters not computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
        COMPUTE_MESH_PARAMETERS {rawparams}
        M400 # mandatory to flush the gcode buffer and be sure to use the last computed parameters
        _DO_ADAPTIVE_MESH
    {% endif %}
[gcode_macro _DO_ADAPTIVE_MESH]
gcode:
    # 1 ----- POPULATE BEDMESH PARAMS FROM SAVED VARIABLES ----------------------
    {% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
    {% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
    {% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
    {% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
    {% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
    {% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
    {% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
    # 2 --------- ADAPTIVE_BED_MESH LOGIC --------------------------------------
    # If it's necessary to do a mesh
    {% if do_mesh %}
        # If it's a standard bed_mesh to be done
        {% if do_nominal %}
            RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
            BED_MESH_CALIBRATE
        {% else %}
            RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
            BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
        {% endif %}
    {% else %}
        RESPOND MSG="Adaptive bed mesh: no mesh to be done"
    {% endif %}

    # Set back the 'ready' parameter to false
    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}


[gcode_macro CALIBRATE]
description: Calibrate the printer flow or pressure advance
gcode:
    # Type of calibration
    {% set TYPE = params.TYPE|default("")|string %}
    # Define vars with safe default values for ABS (main material I'm using)
    {% set BED_TEMP = params.BED_TEMP|default(110)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
    {% set MATERIAL = params.MATERIAL|default("ABS")|string %}
    
    {% if TYPE=="" %}
        {action_respond_info("Please call this macro using TYPE= \"flow\" or \"pressure_advance\"")}
        {action_raise_error("not enough parameters to start a calibration!")}
    
    {% elif TYPE=="flow" %}
        # Call the standard START_PRINT with almost no soaking time and no chamber temp requirement (we want to go fast!)
        # Also no bed mesh needed for this one as it's a small center print
        START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} MATERIAL={MATERIAL} SOAK=1 SIZE=130_130_170_170
        FLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471
    
    {% elif TYPE=="pressure_advance" %}
        # Call the standard START_PRINT with almost no soaking time and no chamber temp requirement (we want to go fast!)
        # A bed mesh is needed for this one as it's a large print (120mm sized square)
        START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} MATERIAL={MATERIAL} SOAK=1 SIZE=90_90_210_210
        PRESSURE_ADVANCE_CALIBRATION

    {% endif %}

    END_PRINT FILTER_TIME=0

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description: Calibrate the pressure advance by printing a grid pattern
gcode:
    # 
    # input and tunables
    #
    {% set pa_start     = params.START|default(0.02)|float %}       # starting PA value
    {% set pa_increment = params.INCREMENT|default(0.005)|float %}  # how much to increment PA per band

    {% set do_raft = params.RAFT|default(1)|int %}  # whether to print a raft or not
    
    {% set print_size      = params.SIZE|default(120)|int %}                      # width/height of the printed test
    {% set num_bands       = params.BANDS_LIMIT|default(999)|int %}               # limit the number of bands to print. othwerwise print as many as would fit within a given size
    {% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}              # number of lines per band. half are control, another half the test
    {% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},  # extrusion multiplier for line print moves
    {% set retract_length  = params.RETRACT|default(0.6)|float %}                 # how much to retract when traveling between print moves
    {% set initial_purge   = params.PURGE_MM|default(8)|int %}                    # mm of filament to purge before printing. set to 0 to disable

    {% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}  # print feedrate of the line in the middle of the band
    {% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}    # print feedrate of the lines on the sides of the band
    {% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}   # print feedrate of the line in the middle of the band
    {% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}  # travel feedrate between print moves
    {% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}    # print feedrate for printing raft
    {% set feedrate_z       = 5 * 60 %}   # z axis travel feedrate
    {% set feedrate_retract = 50 * 60 %}  # retract and deretract feedrate
    
    {% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}  # distance between lines in a band
    {% set spacing_band  = 2 %}                                       # distance between individual bands
    {% set spacing_raft  = 2 %}                                       # distance between raft lines
    
    {% set fast_line_ratio_percent = 50 %}
    # sanity check
    {% set lines_per_band    = [2, lines_per_band]|max %}
    {% set e_multiplier      = [1, e_multiplier]|max %}
    {% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
    {% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
    {% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}  # the higher the extrusion multiplier the wider the spacing
    # computed values
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set line_width    = nozzle_diameter * 1.25 %}
    {% set line_height   = nozzle_diameter / 2 %}
    {% set z_hop_height  = 2 * line_height %}
    {% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %} 
    {% set spacing_purge = line_height * 0.8 %}  # distance between purge lines and raft
    # set print width to align with the raft grid
    {% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}  # align raft spacing to multiples of line width
    {% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
    {% set print_width    = num_raft_lines * spacing_raft %}
    # adjust print height to align with the band grid
    {% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
    {% set bands_per_height = (([print_size, max_y]|min  - spacing_purge) / band_height)|round(0, 'floor')|int %}
    {% set num_bands        = [num_bands, bands_per_height]|min %}  
    {% set print_height     = num_bands * band_height - spacing_band - spacing_purge %}
    # adjust slow and fast line lengths to align with raft grid
    {% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}  # ends between raft lines
    {% set fast_line_length = print_width - slow_line_length * 2 %}
    {% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
    {% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
    # find start position
    {% set x_start = max_x / 2 - print_width  / 2 %}
    {% set y_start = max_y / 2 - print_height / 2 %}

    {action_respond_info("")}
    {action_respond_info("Starting Pressure Advance calibration print.")}
    {action_respond_info("")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button once the print starts exhibiting PA values that are obviously too high.")}
    {action_respond_info("")}
    {action_respond_info("PA of first band: %.4f" % pa_start)}
    {action_respond_info("PA of last band: %.4f" % (num_bands * pa_increment))}
    {action_respond_info("PA increment per band: %.4f" % pa_increment)}
    {action_respond_info("Number of bands: %d" % num_bands)}
    {action_respond_info("")}
    {action_respond_info("Inspect the printed model. "
      "Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "
      "Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "
      "Your final Pressure Advance value would then be:"
    )}
    {action_respond_info("")}
    {action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
    {action_respond_info("")}
    {action_respond_info("Update your [extruder] config section and set \"pressure_advance\" to the value you calculated.")}
    {action_respond_info("")}

    # The printed model should be inspected by 
# 
# Then the pressure advance value is calculated as follows:
#    PA = START + (INCREMENT * band_number)
# Which in case of using default values, would be:
#    PA = 0.01 + (0.002 * band_number)
#
   
    SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
    {% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
    SET_PRESSURE_ADVANCE ADVANCE={pa_start}  # start with a given PA

    #
    # purging before raft
    #
    M117 Priming
    G90  # absolute coords
    G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}  # move to start position
    G91  # relative positioning
    G1 E{initial_purge} F{5 * 60}  # extrude at ~12mm3/sec
    G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}  # move to next line
    G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    
    #
    # print the raft
    #
    {% if do_raft == 1 %}
      G0 F{feedrate_raft} # set print speed
      
      {% for curr_raft_line in range(1, num_raft_lines + 2) %} # rafts need to be on both sides
          # see if we need to print thick raft on slow/fast line boundary
          {% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
              G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
              G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
          {% endif %}
          
          G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm} # print the vertical raft line

          # move over to next column
          {% if not loop.last %}
            {% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
            G1 X{horizontal_move} E{horizontal_move * e_per_mm}  
          {% endif %}
      {% endfor %}

      G1 E-{retract_length} F{feedrate_retract}  # retract
      G0 Z{z_hop_height} F{feedrate_z}           # z-hop
    {% endif %}

    #
    # print the bands
    #
    M117 Printing bands
    G90  # absolute coords
    G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}  # move to XY start position
    G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}        # move to Z start position
    G91  # relative positioning
    G1 E{retract_length} F{feedrate_retract}  # unretract

    # print bands
    {% for curr_band_num in range(1, num_bands + 1) %}
      {% set outer_loop = loop %}

      {% set curr_pa_value = pa_start + (curr_band_num - 1) * pa_increment %}
      SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}  # set PA
      M117 Band {curr_band_num} PA {curr_pa_value|round(4)}

      # print control lines
      {% for _ in range(num_lines_control) %}
        G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control} # print line

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}  # move to start of next line

        G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
        G1 E{retract_length} F{feedrate_retract}  # unretract
      {% endfor %}

      # print test lines
      {% for _ in range(num_lines_test) %}
        {% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
          G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f} # print line
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        {% if not (outer_loop.last and loop.last) %}
          G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}  # move to start of next line
          G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
          G1 E{retract_length} F{feedrate_retract}  # unretract
        {% endif %}
      {% endfor %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}  # retract
    G0 Z20 F{feedrate_z}  # up
    G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}  # center back
    
    M117  # clear the LCD
    SET_PRESSURE_ADVANCE ADVANCE={pa_saved}  # restore original PA
    RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness: 0.0
variable_last_evalue: 0.0
gcode:

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description: Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode:
    #
    # PARAMETERS
    #
    {% set do_raft = params.DO_RAFT|default(1)|int %} # whether to print a raft or not
    {% set do_retract = params.DO_RECTRACT|default(0)|int %} # whether to enable retract/unrectract on travel moves
    {% set print_size = params.SIZE|default(40)|int %} # size of the printed object on the build plate
    {% set print_height = params.HEIGHT|default(15)|int %} # height of the printed object
    {% set corner_radius = params.CORNER_RADIUS|default(8)|int %} # radius of the corners to smooth the shell and toolpath
    {% set number_of_perimeters = params.PERIMETERS|default(2)|int %} # number of perimeters to print the shell
    {% set fan_speed = params.FAN_SPEED|default(20)|int %} # part cooling fan speed in percent (0-100)

    {% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.93)|float %} # extrusion multiplier for the shell
    {% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %} # filament diameter
    {% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %} # extrusion width goal for one line
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %} # layer height for the print

    {% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %} # how much to retract when traveling between print moves
    {% set initial_purge = params.PURGE_MM|default(1)|int %} # mm of filament to purge before printing. set to 0 to disable
    {% set z_hop_height  = 2 * layer_height %}

    {% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %} # print feedrate
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between print moves
    {% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %} # print feedrate for printing raft
    {% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %} # z axis travel feedrate
    {% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %} # retract and deretract feedrate

    #
    # COMPUTED VALUES
    #
    {% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %} # computed E factor (similar to Slic3r/PrusaSlicer/SuperSlicer)
    {% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %} # line spacing during the print
    {% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %} # theoric shell thickness

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set x_start = max_x / 2 - print_size / 2 %}
    {% set y_start = max_y / 2 - print_size / 2 %}
    {% set x_end = x_start + print_size %}
    {% set y_end = y_start + print_size %}

    {% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
    {% set raft_size = num_raft_lines * spacing %}

    #
    # STARTING...
    #
    {action_respond_info("")}
    {action_respond_info("Starting extrusion flow calibration print")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}
    {action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}
    {action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}
    {action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}
    {action_respond_info("")}
    {action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}
    {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION

    #
    # set variables for later computation
    #
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
    
    #
    # purging before raft
    #
    G90
    M83
    G92 E0.0
    G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel} # move at the start position to do a purge line
    
    G91 # use relative coordinates for the prime line
    G1 E{initial_purge} F{5 * 60}
    G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2} # print prime line
    G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2} # move to next line
    G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2} # print second prime line

    G1 E-{retract_length} F{feedrate_retract} # retract
    G0 Z{z_hop_height} F{feedrate_z} # z-hop

    G90 # back to absolute coordinates
    G0 X{x_start} Y{y_start} F{feedrate_travel} # move to start position
    G1 Z{layer_height} F{feedrate_z} # move to print height
    G1 E{retract_length} F{feedrate_retract} # unretract

    #
    # print the raft
    #
    {% if do_raft == 1 %}
        G91 # use relative coordinates for the raft
        {% for curr_raft_line in range(1, num_raft_lines + 2) %}
            # print a raft line with alternating direction
            G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm * e_multiplier} F{feedrate_raft}

            # spacing move
            {% if not loop.last %}
                G1 X{spacing} E{spacing * e_per_mm * e_multiplier} F{feedrate_raft}
            {% endif %}
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract} # retract
        G0 Z{z_hop_height} F{feedrate_z} # z-hop
        G90 # back to absolute coordinates
    {% endif %}
    
    #
    # print the shell
    #
    G90
    M106 S{fan_speed * 255 / 100}

    # for each layer
    {% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
        G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel} # move to XY start position
        G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z} # move to Z start position

        # print one layer of the shell (in a for loop to do all the perimeters of one layer)
        {% for perim_num in range(number_of_perimeters) %}
            # compute values for the current perimeter (offset and radius)
            {% set perim_offset = perim_num * spacing %}
            {% set perim_radius = corner_radius - (perim_num * spacing) %}
            
            # start position of the current perimeter
            G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
            {% if do_retract == 1 %}
                G1 E{retract_length} F{feedrate_retract} # unretract
            {% endif %}

            # print the perimeter using the offset and radius computed
            G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm * e_multiplier} F{feedrate_print}
            G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm * e_multiplier} F{feedrate_print}
            G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm * e_multiplier} F{feedrate_print}
            G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm * e_multiplier} F{feedrate_print}
            G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm * e_multiplier} F{feedrate_print}
            G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm * e_multiplier} F{feedrate_print}
            G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm * e_multiplier} F{feedrate_print}
            G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm * e_multiplier} F{feedrate_print}

            {% if do_retract == 1 %}
                G1 E-{retract_length} F{feedrate_retract} # retract
            {% endif %}
        {% endfor %}

        {% if do_retract == 1 %}
            G91
            G0 Z{z_hop_height} F{feedrate_z}
            G90 
        {% endif %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}
    G91
    G0 Z20 F{feedrate_travel}

    RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION


[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description: Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode:
    {% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %} # extrusion multiplier used for the calibration print
    {% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %} # theorical shell thickness
    {% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %} # measured shell thickness on the calibration print

    # if there is no OLD_EXTRUSION_MULTIPLIER passed as param, get the one from the last print calib run
    {% if evalue == 0.0 %}
        {% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
        
        # then, if there is also no evalue saved from the last run, alert user
        {% if last_evalue == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_evalue = last_evalue %}
            {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f % final_evalue")}
        {% endif %}
    {% else %}
        {% set final_evalue = evalue %}
        {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f % final_evalue")}
    {% endif %}

    # similarly, if there is no THEORICAL_THICKNESS passed as param, get the one from the last print calib run
    {% if theorical_thickness == 0.0 %}
        {% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
        
        # then, if there is also no evalue saved from the last run, alert user
        {% if last_shell_thickness == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_theorical_thickness = last_shell_thickness %}
            {action_respond_info("Using THEORICAL_THICKNESS: %.3f % final_theorical_thickness")}
        {% endif %}
    {% else %}
        {% set final_theorical_thickness = theorical_thickness %}
        {action_respond_info("Using THEORICAL_THICKNESS: %.3f % final_theorical_thickness")}
    {% endif %}

    # use the measured thickness from the user to compute a new flow value
    {% if measured_thickness == 0.0 %}
        {action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
        {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
        {action_raise_error("not enough data to perform the computation of the new flow !")}
    {% else %}
        {% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
        {action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
        {action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
        {action_respond_info("")}
    {% endif %}

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84
